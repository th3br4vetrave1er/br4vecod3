from fpdf import FPDF

class PDF(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, 'Ответы на вопросы для собеседования на позицию Стажера Python разработчика', 0, 1, 'C')

    def chapter_title(self, num, title):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, f'Вопрос {num}: {title}', 0, 1)
        self.ln(5)

    def chapter_body(self, body):
        self.set_font('Arial', '', 12)
        self.multi_cell(0, 10, body)
        self.ln()

    def add_question(self, num, title, body):
        self.add_page()
        self.chapter_title(num, title)
        self.chapter_body(body)

pdf = PDF()
pdf.set_left_margin(10)
pdf.set_right_margin(10)

questions_and_answers = [
    ("Что такое PEP 8? Почему важно следовать ему?", "PEP 8 — это руководство по стилю для написания кода на Python. Следование PEP 8 улучшает читаемость и согласованность кода, что облегчает его поддержку и совместную работу над проектом."),
    ("Объясните разницу между списком и кортежем в Python.", "Списки (list) изменяемы и их элементы можно изменять после создания. Кортежи (tuple) неизменяемы, и их элементы нельзя изменить после создания."),
    ("Как работает декоратор в Python? Приведите пример.", "Декоратор — это функция, которая принимает другую функцию и расширяет её функциональность без изменения её кода. Пример:\n\n```python\ndef my_decorator(func):\n    def wrapper():\n        print('Что-то происходит до функции.')\n        func()\n        print('Что-то происходит после функции.')\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print('Привет!')\n\nsay_hello()\n```"),
    ("Что такое list comprehension? Приведите пример.", "List comprehension — это краткий способ создания списков. Пример:\n\n```python\nsquares = [x**2 for x in range(10)]\n```"),
    ("Что такое lambda-функция? Как её использовать?", "Lambda-функция — это анонимная функция, определяемая с помощью ключевого слова `lambda`. Пример:\n\n```python\nadd = lambda x, y: x + y\nprint(add(2, 3))\n```"),
    ("Как работает метод __init__ в Python?", "Метод `__init__` — это инициализатор класса, который вызывается при создании нового объекта. Пример:\n\n```python\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n```"),
    ("Объясните разницу между методом класса и статическим методом.", "Метод класса (`@classmethod`) принимает класс как первый аргумент (`cls`). Статический метод (`@staticmethod`) не принимает ни класс, ни экземпляр в качестве первого аргумента."),
    ("Как работает управление памятью в Python?", "Управление памятью в Python осуществляется с помощью сборщика мусора, который автоматически удаляет объекты, не имеющие ссылок."),
    ("Что такое GIL (Global Interpreter Lock) и как он влияет на многопоточность?", "GIL — это глобальная блокировка интерпретатора, которая позволяет только одному потоку исполнять байт-код Python в любой момент времени, что ограничивает истинный параллелизм."),
    ("Что такое менеджеры контекста в Python? Как создать собственный?", "Менеджеры контекста используются для управления ресурсами, например, файлами. Пример создания:\n\n```python\nclass MyContext:\n    def __enter__(self):\n        print('Entering')\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print('Exiting')\n\nwith MyContext():\n    print('Hello')\n```"),
    ("Как реализовать связанный список в Python?", "Пример реализации связанного списка:\n\n```python\nclass Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n```"),
    ("Какие встроенные структуры данных есть в Python?", "Списки, кортежи, множества и словари."),
    ("Объясните принцип работы очереди и стека.", "Очередь (FIFO): первый вошёл — первый вышел. Стек (LIFO): последний вошёл — первый вышел."),
    ("Что такое дерево поиска? Как его реализовать?", "Дерево поиска — это бинарное дерево, в котором каждый узел имеет не более двух дочерних элементов, причём левый потомок меньше родителя, а правый больше. Пример:\n\n```python\nclass TreeNode:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n```"),
    ("Как работает хеш-таблица? Приведите пример её использования.", "Хеш-таблица использует хеш-функцию для преобразования ключей в индексы массива, где хранятся значения. Пример использования:\n\n```python\nhash_table = {}\nhash_table['key'] = 'value'\n```"),
    ("Что такое рекурсия? Приведите пример рекурсивной функции.", "Рекурсия — это когда функция вызывает саму себя. Пример:\n\n```python\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n```"),
    ("Объясните алгоритмы сортировки: быстрая сортировка, сортировка слиянием.", "Быстрая сортировка делит массив на подмассивы и сортирует их. Сортировка слиянием делит массив на половины, сортирует каждую и объединяет обратно."),
    ("Как искать элементы в отсортированном массиве?", "Используя бинарный поиск, который делит массив на половины и ищет в одной из них."),
    ("Что такое инкапсуляция, наследование и полиморфизм?", "Инкапсуляция скрывает детали реализации, наследование позволяет создавать классы на основе других классов, полиморфизм позволяет использовать объекты разных классов через общий интерфейс."),
    ("Как реализовать наследование в Python? Приведите пример.", "Пример:\n\n```python\nclass Parent:\n    def __init__(self, name):\n        self.name = name\n\nclass Child(Parent):\n    def __init__(self, name, age):\n        super().__init__(name)\n        self.age = age\n```"),
    ("Что такое абстрактный класс? Как его использовать в Python?", "Абстрактный класс содержит один или более абстрактных методов, которые должны быть реализованы в подклассах. Пример:\n\n```python\nfrom abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def sound(self):\n        pass\n```"),
    ("Как работает метод `super()`?", "`super()` используется для вызова методов родительского класса. Пример:\n\n```python\nclass Parent:\n    def __init__(self, name):\n        self.name = name\n\nclass Child(Parent):\n    def __init__(self, name, age):\n        super().__init__(name)\n        self.age = age\n```"),
    ("Что такое множественное наследование? Какие проблемы оно может вызвать?", "Множественное наследование — это когда класс наследуется от нескольких классов. Оно может вызвать проблемы с разрешением метода (MRO)."),
    ("Как работать с файлами в Python?", "Используя функции `open()`, `read()`, `write()`, `close()`. Пример:\n\n```python\nwith open('file.txt', 'r') as file:\n    content = file.read()\n```"),
    ("Что такое `with open` в Python?", "`with open` автоматически закрывает файл после выхода из блока. Пример:\n\n```python\nwith open('file.txt', 'r') as file:\n    content = file.read()\n```"),
    ("Как подключиться к базе данных с помощью Python?", "Используя библиотеки, такие как `sqlite3` или `psycopg2`. Пример:\n\n```python\nimport sqlite3\nconn = sqlite3.connect('example.db')\n```"),
    ("Какие библиотеки для работы с базами данных вы знаете?", "`sqlite3`, `psycopg2`, `SQLAlchemy`, `PyMySQL`."),
    ("Что такое &#8203;:citation[oaicite:0]{index=0}&#8203;
